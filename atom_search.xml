<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hungry and Foolish]]></title>
  <link href="http://vladigleba.github.io/atom.xml" rel="self"/>
  <link href="http://vladigleba.github.io/"/>
  <updated>2013-11-14T22:55:19-08:00</updated>
  <id>http://vladigleba.github.io/</id>
  <author>
    <name><![CDATA[Vladi Gleba]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using MapBox with Ruby on Rails]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/11/14/using-mapbox-with-ruby-on-rails/"/>
    <updated>2013-11-14T10:39:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/14/using-mapbox-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland/">I wrote about</a> <a href="http://phindee.com/">phindee</a>, a Ruby on Rails app I made to make it easy to discover happy hours in downtown Portland. I quickly mentioned that phindee’s mapping functionality is provided by the <a href="https://www.mapbox.com/mapbox.js/">MapBox JavaScript API</a>, but did not go into any more detail for brevity reasons. I still think it’s an important topic to talk about because I remember having a hard time finding tutorials about integrating MapBox with Ruby on Rails, specifically.</p>

<p>I hope this post fills a bit of that void. <!-- more --></p>

<h1>Why MapBox?</h1>

<p>It’s actually quite simple, really. You see, Google is an immense company swimming in cash and dominating virtually every product in which it has its hands. Who has the world’s most popular video sharing site? Google. Email service? Google. Whose mobile operating system has the largest market share? Google’s. Who has the world&rsquo;s most popular search engine? Google. And mapping service? Google. Heck, it’s not even a close race in most of these categories. This is not healthy for the rest of us, no matter how you measure it.</p>

<p>MapBox is actually open source, and Google Maps is obviously not. When I have a choice, I’ll go with open source over proprietary any day.</p>

<p>Whenever a company lacks competition, the pace of innovation slows. Every time a majority of our data is concentrated in the hands of a single company, we should feel a bit uneasy. That’s why every time a small, promising startup tries to take on the giant, I will always <a href="http://venturebeat.com/2013/10/16/mapbox-heads-into-battle-against-google-maps-with-a-10m-war-chest-from-foundry-group/">cheer</a> for the underdog. Always. And I’m glad <a href="http://www.pcmag.com/article2/0,2817,2401037,00.asp">I’m not the only one</a>.</p>

<h1>Converting Addresses into Coordinates</h1>

<p>Alright, enough of that. Let&rsquo;s start coding.</p>

<p>First thing we&rsquo;ll do is convert our addresses into coordinates, which MapBox needs in order to place our markers (pin-drops) on the map. We could use the <a href="https://developers.google.com/maps/documentation/geocoding/">Google Geocoding API</a> to do this manually, but I recommend using the <a href="http://www.rubygeocoder.com/">Geocoder</a> gem to automate the process. The gem uses the Google Maps API by default, but it supports other services as well.</p>

<p>Because there is a <a href="http://railscasts.com/episodes/273-geocoder">Railscasts episode</a> covering the gem, I won’t go into any more detail here.</p>

<h1>Building a JSON object</h1>

<p>Once we have the coordinates, we’re ready to build a JSON object array that will tell MapBox how to display our markers. Our JSON objects will be in the <a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON format</a>, which is just a format to describe geographic data in JSON. MapBox uses the GeoJSON format to capture the necessary data needed to generate all the markers on the map. Building a JSON object in Rails is easy. Below is how I do it for phindee.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@happy_hours</span> <span class="o">=</span> <span class="no">HappyHour</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="vi">@geojson</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@happy_hours</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">happy_hour</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@geojson</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;Feature&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">geometry</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;Point&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">coordinates</span><span class="p">:</span> <span class="o">[</span><span class="n">happy_hour</span><span class="o">.</span><span class="n">longitude</span><span class="p">,</span> <span class="n">happy_hour</span><span class="o">.</span><span class="n">latitude</span><span class="o">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="ss">properties</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="n">happy_hour</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">address</span><span class="p">:</span> <span class="n">happy_hour</span><span class="o">.</span><span class="n">street</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:&#39;marker-color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;#00607d&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:&#39;marker-symbol&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;circle&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:&#39;marker-size&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;medium&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code simply loops through each happy hour, creates an object, then appends and returns the newly created object to the <code>@geojson</code> array with the help of the <code>&lt;&lt;</code> method. Note that each object in our JSON array must contain a <code>type</code> key, a <code>geometry</code> key, and a <code>property</code> key. In our example above, the <code>geometry</code> key says that we want our marker displayed as a point at that specific set of coordinates, while the <code>property</code> key says we want our marker to be a medium blue circle that displays the happy hour name and street address when clicked.</p>

<p>I placed the above code inside one of the methods in my happy_hours_controller.rb file, as that’s the controller that deals with happy hours. You’ll place your code inside whatever controller is appropriate for your specific situation.</p>

<h2>Telling Rails How to Respond</h2>

<p>Because we want Rails to be able to return a JSON object, we’ll need to explicitly tell it do so via a <code>respond_to</code> block, which we will place right after the code we wrote above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@geojson</span> <span class="p">}</span>  <span class="c1"># respond with the created JSON object</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on the type of request, only one of the two lines above will be executed. For example, when we will later make an AJAX request in the JSON format, Rails will know to respond with the JSON object we just created above; otherwise, it will respond with a regular HTML file.</p>

<h1>Working with the MapBox API</h1>

<p>Now that we have the building blocks in place, we’re ready to start working with the MapBox API itself. My code examples below will all be in CoffeeScript because that’s what I used for phindee, but if you’re not familiar with CoffeeScript, you can copy the code examples into <a href="http://js2coffee.org/">js2coffee.org</a> to get the JavaScript equivalent.</p>

<h2>Adding the Library Code</h2>

<p>Alright, first thing we’ll do is include the MapBox JavaScript API, along with the accompanying CSS code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://api.tiles.mapbox.com/mapbox.js/v1.0.2/mapbox.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://api.tiles.mapbox.com/mapbox.js/v1.0.2/mapbox.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I wrote this code, the latest version of the MapBox JavaScript API was 1.0.2, and my links above reflect that. See their <a href="https://www.mapbox.com/mapbox.js/overview/">documentation</a> for the current latest version and update your links accordingly.</p>

<h2>Initializing the Map</h2>

<p>Next, we’ll create a free MapBox account and make our own custom-colored map. Afterwards, we’ll open the JavaScript file that corresponds to the controller which contains the two earlier code blocks (mine is called happy_hours.js.coffee), and we’ll add a line instantiating the map with the map ID of the custom-colored map we just created.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># get JSON object</span>
</span><span class='line'><span class="c1"># on success, parse it and </span>
</span><span class='line'><span class="c1"># hand it over to MapBox for mapping </span>
</span><span class='line'><span class="nv">markerLayer = </span><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>  <span class="nv">dataType: </span><span class="s">&#39;text&#39;</span>
</span><span class='line'>  <span class="nv">url: </span><span class="s">&#39;happy_hours/happening_now.json&#39;</span>
</span><span class='line'>  <span class="nv">success: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="nv">geojson = </span><span class="nx">$</span><span class="p">.</span><span class="nx">parseJSON</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">markerLayer</span><span class="p">.</span><span class="nx">setGeoJSON</span><span class="p">(</span><span class="nx">geojson</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The coordinates we’re passing on to the <code>setView()</code> method tell the API where to center the map, while the 14 represents the zoom level for the map. In reality, <code>setView()</code> actually comes from the <a href="http://leafletjs.com/reference.html#map-setview">Leaflet JavaScript library</a>; MapBox simply extends and simplifies it.</p>

<h2>Making the AJAX Call</h2>

<p>Okay, now we’re ready to use the JSON objects we created earlier. We’ll make an AJAX call in the JSON format, and Rails will return our JSON object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># get JSON object</span>
</span><span class='line'><span class="c1"># on success, parse it and </span>
</span><span class='line'><span class="c1"># hand it over to MapBox for mapping </span>
</span><span class='line'><span class="nv">markerLayer = </span><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>  <span class="nv">dataType: </span><span class="s">&#39;text&#39;</span>
</span><span class='line'>  <span class="nv">url: </span><span class="s">&#39;happy_hours/happening_now.json&#39;</span>
</span><span class='line'>  <span class="nv">success: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="nv">geojson = </span><span class="nx">$</span><span class="p">.</span><span class="nx">parseJSON</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">markerLayer</span><span class="p">.</span><span class="nx">setGeoJSON</span><span class="p">(</span><span class="nx">geojson</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above simply sends out an AJAX call to the URL that corresponds to the controller method into which we added the JSON object code from before. The <code>.json</code> extension alerts Rails to return a JSON response, instead of an HTML one. On a successful return, we then parse the JSON object and pass it on to the <code>setGeoJSON()</code> method for mapping. Kid stuff.</p>

<h2>Creating Custom Popups</h2>

<p>Now we’ll create our custom popups.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># add custom popups to each marker</span>
</span><span class='line'><span class="nx">map</span><span class="p">.</span><span class="nx">markerLayer</span><span class="p">.</span><span class="nx">on</span> <span class="s">&#39;layeradd&#39;</span><span class="p">,</span> <span class="nf">(e) -&gt;</span>
</span><span class='line'>  <span class="nv">marker = </span><span class="nx">e</span><span class="p">.</span><span class="nx">layer</span>
</span><span class='line'>  <span class="nv">feature = </span><span class="nx">marker</span><span class="p">.</span><span class="nx">feature</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># create custom popup</span>
</span><span class='line'>  <span class="nv">popupContent = </span> <span class="s">&#39;&lt;div class=&quot;popup&quot;&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&#39;&lt;h3&gt;&#39;</span> <span class="o">+</span> <span class="nx">feature</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s">&#39;&lt;/h3&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&#39;&lt;p&gt;&#39;</span> <span class="o">+</span> <span class="nx">feature</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">address</span> <span class="o">+</span> <span class="s">&#39;&lt;/p&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s">&#39;&lt;/div&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># http://leafletjs.com/reference.html#popup</span>
</span><span class='line'>  <span class="nx">marker</span><span class="p">.</span><span class="nx">bindPopup</span> <span class="nx">popupContent</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">closeButton: </span><span class="kc">false</span>
</span><span class='line'>    <span class="nv">minWidth: </span><span class="mi">320</span>
</span></code></pre></td></tr></table></div></figure>


<p>To summarize the code above, we’re simply looping through each marker, creating a custom popup for it, and then binding it using the <code>bindPop()</code> method, which once again comes from the Leaflet library.</p>

<h2>Opening a Popup Programmatically</h2>

<p>If you look at <a href="http://phindee.com/">phindee</a>, you’ll notice that when you open the sidebar and click on a happy hour, the popup on the corresponding marker on the map automatically opens up. Being able to open up a popup programmatically is useful, and below is how I did it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># handles a sidebar happy hour click</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&#39;article li&#39;</span><span class="p">).</span><span class="nx">click</span> <span class="nf">(e) -&gt;</span>
</span><span class='line'>  <span class="nv">current = </span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">currentlyClickedName = </span><span class="nx">current</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s">&#39;h2&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># opens/closes popup for currently clicked happy hour</span>
</span><span class='line'>  <span class="nx">map</span><span class="p">.</span><span class="nx">markerLayer</span><span class="p">.</span><span class="nx">eachLayer</span> <span class="nf">(layer) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">layer</span><span class="p">.</span><span class="nx">feature</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">name</span> <span class="o">is</span> <span class="nx">currentlyClickedName</span>
</span><span class='line'>      <span class="nv">id = </span><span class="nx">layer</span><span class="p">.</span><span class="nx">_leaflet_id</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">_layers</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">openPopup</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We’re simply adding a <code>click</code> event on the sidebar happy hours, extracting the happy hour name, and looping through each marker to find the one with the matching name. Once we find a match, we extract the marker’s ID, and use that ID to open up the popup programmatically by calling Leaflet’s <code>openPopup()</code> method.</p>

<p>And that’s all there is to it! Our MapBox integration with Ruby on Rails is now complete, although we only scratched the surface of what&rsquo;s possible. Feel free to take a look at the <a href="https://www.mapbox.com/mapbox.js">MapBox</a> and <a href="http://leafletjs.com/reference.html">Leaflet</a> documentation to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phindee: A New Way to Discover Happy Hours in Downtown Portland]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland/"/>
    <updated>2013-11-08T12:59:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland</id>
    <content type="html"><![CDATA[<p>I love Portland. It’s a fun, quirky city that makes me feel right at home. And the longer I live here, the deeper my affection grows. There are many reasons why this is so, but one high on the list is the food scene. Now I haven’t lived in any other major city, so I can’t compare, but others who have tend to agree. <!-- more --></p>

<p>I’m certainly satisfied.</p>

<h1>An Idea Is Born</h1>

<p>Of course, eating out all the time can get a bit expensive, and being a college student, I’m definitely not swimming in cash. I usually eat out just for lunch because I hate bringing cold lunch, but even this can quickly add up. So in an effort to save money (and to learn Ruby on Rails), I built a happy hour web application a couple months ago called <a href="http://phindee.com/">phindee</a>.</p>

<p>Being a web developer, I always enjoy learning about other people&rsquo;s stacks, so I&rsquo;d like to return the favor and share how phindee works.</p>

<h1>A Look at the Wiring</h1>

<p>When you visit phindee, you’re presented with a map of the current happy hours in downtown Portland, along with information like the happy hour type and time, as well as the name, phone number, website, and address of its location. And of course, it doesn’t matter what device you use to visit phindee because it’s based on a responsive design.</p>

<p>Behind the scenes, phindee sits on top of a <a href="http://linode.com/">Linode</a> server powered by <a href="http://www.ubuntu.com/">Ubuntu</a> and served by <a href="http://nginx.org/">Nginx</a> and <a href="http://unicorn.bogomips.org/">Unicorn</a>. I originally had it setup with <a href="https://www.phusionpassenger.com/">Passenger</a>, but since I like to do multiple deploys a day, I got tired of Passenger restarts and site downtime. Unicorn solves this nicely.</p>

<h2>Deployment</h2>

<p>With regards to choosing Nginx, it was a matter of simplicity and speed. Phindee marked my first try at setting up a server from scratch, and from what I read online, Nginx was best suited for my situation. When it came to the actual setup, Ryan Bates’ <a href="http://railscasts.com/">Railscasts episodes</a> helped me out tremendously, especially his episode about <a href="http://railscasts.com/episodes/335-deploying-to-a-vps">VPS deployment</a>.</p>

<p>Up to that point, my previously deployment experience consisted of firing up <a href="http://fireftp.net/">FireFTP</a> and dragging and dropping the necessary files into the appropriate directories on my server. Funny, I know. As a result, it took me a couple of long nights to get everything working properly. Looking back, it was definitely worth it though.</p>

<h2>Storage</h2>

<p>With regards to storage, I went with <a href="http://www.sqlite.org/">SQLite</a> because it was already setup as the Rails default database. I know, kinda lame, but figuring out how to setup a more sophisticated database did not seem like a good use of time, especially since I already had my hands full with server setup. But now that I&rsquo;m done, I do plan on migrating to a <a href="http://www.postgresql.org/">PostgreSQL</a> and <a href="http://redis.io/">Redis</a> backend in the near future.</p>

<h2>Mapping</h2>

<p>The mapping functionality is provided by the excellent <a href="https://www.mapbox.com/mapbox.js/">MapBox JavaScript API</a>. I stumbled upon MapBox thanks to an A List Apart <a href="http://alistapart.com/article/hack-your-maps">article</a> I had read. I originally planned on using Google Maps, but the level of customization MapBox allows is incredible and their documentation is outstanding. On top of that, I feel like Google already has enough money, so why not support an open source service built by a cool new company? More diversity can&rsquo;t hurt, right?</p>

<h2>Icons</h2>

<p>The icons came from <a href="http://thenounproject.com/">The Noun Project</a>, an excellent collection of vector symbols. All the icons are free, but you are required to attribute the designer if you use them. If that’s not possible, you’re free to purchase a full license from the designer and use the icon without attribution; the fee is usually $1.99.</p>

<h2>Preprocessors</h2>

<p>Finally, I rely on <a href="http://slim-lang.com/">SLIM</a> to generate the HTML, <a href="http://sass-lang.com/">SASS</a> to generate the CSS, and <a href="http://coffeescript.org/">CoffeeScript</a> to generate the JavaScript. These pre-processors are easy to pick up, and they’ll save you more than a few keystrokes.</p>

<h1>The Power of the Web</h1>

<p>The world population is now approaching 7.1 billion and <a href="http://data.worldbank.org/indicator/IT.NET.USER.P2">2.5 billion of those</a> are able to access a web application I can build with nothing more than a laptop. I don’t know about you, but that’s mind boggling to me. There are few other professions that have the same reach with such a limited resource pool.</p>

<p>And beyond that, the internet is one of the few things still in existence that gives power and influence to anybody and everybody who has access to it. It transcends borders and gives people a voice. It’s a tremendous blessing that must never be taken away nor destroyed.</p>

<p>It’s an exciting time to be a web developer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Readify: A New Octopress Theme Focused on Readibility]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/10/31/introducing-readify-a-new-octopress-theme-focused-on-readibility/"/>
    <updated>2013-10-31T09:20:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/31/introducing-readify-a-new-octopress-theme-focused-on-readibility</id>
    <content type="html"><![CDATA[<p>Hackers using the <a href="http://octopress.org/">Octopress blogging framework</a> now have a new responsive theme available focused on readability! It&rsquo;s called <a href="https://github.com/vladigleba/readify">Readify</a>.</p>

<!-- more -->


<h1>Background</h1>

<p>Readify was born out of a desire for a simple, minimalist theme that made the reading experience as pleasurable as possible. There are a couple of minimalist Octopress themes already out there, among them <a href="https://github.com/lucaslew/whitespace">Whitespace</a>, the inspiration behind Readify, but I could not find a theme focused on providing a nice reading experience. So I built Readify to fill in that gap.</p>

<h1>Designed Using a Modular Scale</h1>

<p>Before building Readify, I spent some time studying the designs and the underlying code of the various blogs I follow. I ended up learning <a href="http://vladigleba.github.io/blog/2013/10/22/ways-to-define-a-grid-system/">quite a bit</a>. I read many articles, but the one that resonated with me the most was A List Apart&rsquo;s <cite><a href="http://alistapart.com/articles/more-meaningful-typography/">More Meaningful Typography</a></cite> article; it explained how to use values from a modular scale to build meaningful compositions and achieve visual harmony. I definitely wanted to use this technique with Readify.</p>

<p>My modular scale was based on the <a href="http://en.wikipedia.org/wiki/Golden_ratio">golden ratio</a> (1:1.618) and the numbers 20 and 62. I picked the golden ratio because I had just read about it a week earlier when learning about grid systems and was impressed by its occurance in everything from music to architecture to nature. It is known to provide pleasing, visually harmonious proportions, and that&rsquo;s exactly what I wanted for Readify. With regards to picking the two other numbers, 20 was the font size in pixels at which my body text looked most readable, and 62 was the size at which the blog&rsquo;s title looked best. Not very scientific, but it worked.</p>

<p>I then plugged these two numbers, along with the golden ratio, into the calculator at <a href="http://modularscale.com/">modularscale.com</a>, and I had my modular scale. A majority of the font size, line lenght, margin, and padding values come directly from the numbers in the scale. When I needed more options than the scale offered, I ended up adding or subtracting the numbers from the scale for more flexibility.</p>

<h1>Defined Using <code>rem</code> Units</h1>

<p>If you look at the actual values though, you&rsquo;ll notice that they are specified in a unit called &lsquo;rem&rsquo;. It&rsquo;s similar to the <code>em</code> unit, but the difference is the <code>em</code> is calculated based on the value of the parent element, while the <code>rem</code> is based on the value of the top-level root element, which is usually the <code>html</code> element. This means that if the entire layout is <code>rem</code> based, changing the <code>html</code> element&rsquo;s font size means the layout will also proportionally readjust itself. So if one day you decide to increase your body text size by 5%, you will no longer need to manually readjust all the other font sizes, line heights, margins, and paddings to preserve the layout proportions; all you need to do is increase the <code>html</code> element&rsquo;s font size! Pretty nifty stuff.</p>

<p>But of course, there is one caveat. Older browsers do not support <code>rem</code> units, so it&rsquo;s best to include the pixel equivalents as well. This adds code bloat, of course, but if <code>rem</code> units are right for your project, then I think it&rsquo;s worth it.</p>

<h1>Expressed with Large, Legible Fonts</h1>

<p>I ended up using the same fonts as those used by the Whitespace theme. They contrast nicely with each other, and the <a href="https://www.google.com/fonts/specimen/PT+Serif">PT Serif</a> font looks stunning when used in body text. I don&rsquo;t have a scientific explanation for this, but I always prefer body text to be in a serif font compared with a sans serif one, as I find serif fonts easier to read. But it&rsquo;s easy to change if you prefer the other.</p>

<p>With regards to font size, small sizes on the web are a pet peeve of mine. I hate moving closer to the screen or increasing the font size just so the content is readable. That&rsquo;s why I made Readify&rsquo;s body font size a comfortable 20 pixels.</p>

<h1>Built with Sass</h1>

<p>I chose to use the Sass stylesheet language, instead of CSS, because I like using variables in my stylesheets. Instead of doing a document-wide find and replace, I can just change the variable once, and it all propagates everywhere else. I also like the nesting functionality, which saves me quite a bit of typing. And finally, Sass comes with built in <code>lighten()</code> and <code>darken()</code> functions. This means I can use a single color to derive multiple other colors, and that means less maintenance when it&rsquo;s time to change the color scheme.</p>

<p>And of course, Readify is built with media queries, so it looks stunning&mdash;and readable&mdash;on all devices.</p>

<p>If you think Readify is something you might enjoy, head on over to GitHub and <a href="http://github.com/">give it a try</a>! And feel free to offer feedback! This is my first open source project, so I&rsquo;d love to read your comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ways to Define a Grid System]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/10/22/ways-to-define-a-grid-system/"/>
    <updated>2013-10-22T17:32:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/22/ways-to-define-a-grid-system</id>
    <content type="html"><![CDATA[<p>I <a href="http://vladigleba.github.io/blog/2013/10/15/im-diving-in/">started blogging</a> last week. And ever since publishing that first post, I&rsquo;ve been trying to find a suitable design for my blog. I looked at many different blog designs for inspiration, and one of my favorites was Whitney Hess&#8217; <cite><a href="http://whitneyhess.com/blog/">Pleasure and Pain</a></cite> blog. I don&rsquo;t know why, but the design just resonates with me. It feels right.</p>

<p>My knowledge of grid systems is limited, but I figured the design was probably based on a grid. So I decided to spend the past couple of days learning about grid systems. And because I strongly believe the best way to learn is to teach someone else, I would like to summarize what I learned.</p>

<!-- more -->


<p></p>

<p>Disclosure: I don&rsquo;t have a background in design, but I&rsquo;m always eager to learn more, so if you&rsquo;re a designer, please feel free to contribute!</p>

<p>Alright, on to grids.</p>

<blockquote><p>Spacing and the use of space is what holds a design together. Precise and effective space management can make the difference between an average design and an amazing one. &hellip; How big is the header compared to the navigation bar?  How wide is the photo compared to the sidebar? These ratios are what make or break the balance, emphasis and flow of a design. Additionally &hellip; we constantly are looking for order and understanding of the world around us. &hellip; Our mind is constantly seeking some reason, pattern or rational for what we are seeing. This is especially true of spacing, sizing and proportions. &hellip; If that unity doesn’t exist it will always feel unpolished. &mdash;<a href="http://3.7designs.co/blog/2010/10/how-to-design-using-the-fibonacci-sequence/">Ross Johnson</a></p></blockquote>

<p>I&rsquo;ve learned about many different ways of defining grids that achieve this unity, but for reasons of brevity, I will talk about just three.</p>

<h1>Grids Based on the Fibonacci Sequence</h1>

<p>The Fibonacci Sequence looks like this:</p>

<pre><code>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...
</code></pre>

<p>The first two numbers 0 and 1 are always given, and each number after that is the sum of the previous two. Now if you divide 144 by 89, you get 1.617, which is very close to the Golden Ratio (1:1.618). In fact, the higher the numbers in the sequence get, the closer they approach the <a href="http://en.wikipedia.org/wiki/Golden_ratio">Golden Ratio</a>, which is historically known to be aesthetically pleasing and is widely used in all kinds of domains.</p>

<p>Grids based on the Fibonacci sequence use its numbers to define virtually everything from font size and line-height to margins and column widths. The numbers can also be added, subtracted, multiplied, or divided together to offer more choices. I recommend reading Smashing Magazine&rsquo;s <cite><a href="http://www.smashingmagazine.com/2010/02/09/applying-mathematics-to-web-design/">Applying Mathematics to Web Design</a></cite> article to see how the sequence is used to build an actual layout.</p>

<h1>Grids Based on the Canvas</h1>

<p>These grids are built with ratios derived from the available canvas. For example, if your canvas is an A4-sized piece of paper, the ratio would equal the paper&rsquo;s length to width ratio. The canvas is then repeatedly divided according to the ratio and a grid is slowly built up. This creates a sense of connectedness and unity between your layout and the surrounding canvas. I won&rsquo;t go into any more detail, but you can read Mark Boulton&rsquo;s <cite><a href="http://markboulton.co.uk/journal/five-simple-steps-to-designing-grid-systems-part-1">Five Simple Steps</a></cite> series for an illustrative example of this technique.</p>

<h1>Grids Based on the Content</h1>

<blockquote><p>Content precedes design. Design in the absence of content is not design, it&rsquo;s decoration. &mdash;<a href="https://twitter.com/zeldman/statuses/804159148">Jeffrey Zeldman</a></p></blockquote>

<p>I never really understood the reasoning behind this quote until I read A List Apart&rsquo;s <cite><a href="http://alistapart.com/article/more-meaningful-typography">More Meaningful Typography</a></cite> article. The article describes how to achieve visual harmony with the help of modular scales, which are based on numbers that are meaningful to your content. To summarize, you start with a ratio (like 1.618) and a number (say 10), then you multiply and divide, like so:</p>

<pre><code>10 * 1.618 = 16.180
16.180 * 1.618 = 26.179
26.179 * 1.618 = 42.358
...

10 / 1.618 = 6.180
6.180 / 1.618 = 42.358
42.358 / 1.618 = 2.360
...
</code></pre>

<p>These numbers are then used throughout the design for things like font size, line height, margins, column widths, and much more. I chose the number 10 for illustration purposes, but in reality, the number should be meaningful to your design, such as the font size at which body text looks best, or the width of an image used to frame the page. And of course, numbers can be combined if you need more options.</p>

<p>This method is in contrast to the canvas-based way of defining grids in which the canvas, not the content, is used to build the grid. Now there is no such thing as a defined canvas on the web because websites and web apps are viewed on everything from a small mobile screen to a large desktop monitor or even a TV, which is why I find the other two methods I discussed to be better suited for the web. But between the two, I will definitely use the content-based method in my future projects because I love the fact that the numbers are meaninful to, and are derived from, the content. It just feels more &ldquo;organic&rdquo; to me.</p>

<h1>Parting Words</h1>

<p>I&rsquo;d like to conclude with a quote by Mark Boulton that nicely sums everything up:</p>

<blockquote><p>Aesthetics can be measured and more importantly can be constructed. If you want something to be aesthetically pleasing there are steps you can take to make sure it is going in the right direction. &hellip; Well designed grid systems can make your designs not only more beautiful and legible, but more usable. &mdash;<a href="http://markboulton.co.uk/journal/five-simple-steps-to-designing-grid-systems-part-2">Mark Boulton</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Diving In]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/10/15/im-diving-in/"/>
    <updated>2013-10-15T11:20:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/15/im-diving-in</id>
    <content type="html"><![CDATA[<p>Starting a blog is something I wanted to do for a few years now, but I worried too much about not having enough time or things to write about, so I always put it off. But this weekend that all changed.</p>

<!-- more -->


<p>Having some free time on my hands, I found myself doing what I do best: gravitating towards the computer. Blogging had been on my mind during the past week, so I found myself going over to Google and typing &ldquo;blogging platforms&rdquo; into the search bar. It took just a few clicks to stumble onto <a href="http://octopress.org/">Octopress</a>, a blogging framework for hackers. Coming from a Ruby on Rails background, the framework just made sense to me. I realized this was my moment. I couldn&rsquo;t hold off any longer. So I took the plunge.</p>

<p>Now I&rsquo;m sitting typing up this first post. I am both excited and nervous at the same time, but starting a blog feels right to me. Writing is something I&rsquo;ve always enjoyed doing, so having an outlet to express myself through writing is definitely fulfilling.</p>

<p>I do want to mention that since this is my first time blogging, I want to apologize in advance if I make any rookie mistakes. Feel free to laugh and point it out. I will have a good laugh myself and hopefully learn from it.</p>

<p>My main goal with this blog is to share my web development knowledge. I plan on covering the side projects I work on and the technologies that power them. As an aspiring web developer, I heavily rely on other people&rsquo;s blogs to get stuff done, so I want to give back to the community and hopefully be of similar help to other aspiring web developers.</p>

<p>It&rsquo;s been a long time coming, but I now have a blog.</p>

<p>Stay hungry. Stay foolish.</p>
]]></content>
  </entry>
  
</feed>
