<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Topic: Rails | Hungry and Foolish]]></title>
  <link href="http://vladigleba.github.io/blog/topics/rails/atom.xml" rel="self"/>
  <link href="http://vladigleba.github.io/"/>
  <updated>2014-03-06T10:09:29-08:00</updated>
  <id>http://vladigleba.github.io/</id>
  <author>
    <name><![CDATA[Vladi Gleba]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying Rails Apps, Part 1: Securing the Server]]></title>
    <link href="http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server/"/>
    <updated>2014-03-05T11:18:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server</id>
    <content type="html"><![CDATA[<p>Setting up a Rails server from scratch can be a daunting task. I remember my first attempt; it was a multi-day process full of frustration, things not working, me not understanding why, and a whole lot of googling. In an effort to make this experience less painful for those new to Rails, I’d like to share the process I went through to deploy Phindee to a VPS (Virtual Private Server).</p>

<!-- more -->


<h1>Choosing a VPS</h1>

<p>Phindee is currently running on DigitalOcean servers, but there are other options available as well, like Linode, which was my previous VPS provider. If you’re new to deployment, <a href="http://digitalocean.com/">I recommend DigitalOcean</a> because it’ll be ideally suited to your needs, due their more flexible billing policy and cheaper plans, but any VPS provider will do.</p>

<p>Once you decide on a VPS, you’ll then signup for a plan. If you’re just starting out, the cheapest plan available will be enough; otherwise, choose a plan that fits your needs. Once you have an account, you’ll be able to create your server, and typically, you’ll have a list of operating systems to choose from. DigitalOcean offers a wide variety of Linux distributions; I chose the latest 32-bit version of Ubuntu for Phindee, and I recommend you do the same if you&rsquo;re new to deployment.</p>

<p>The reason why I chose the 32-bit version was because it uses less memory than the 64-bit one. This is something you should consider if you chose one of the cheaper plans with a lower amount of memory, but if memory is not an issue, go with the 64-bit since you’ll have better performance (<a href="howtoubuntu.org/how-to-decide-if-you-should-use-32bit-or-64bit-ubuntu">see this page</a> to learn more).</p>

<h1>Logging In</h1>

<p>Once you create your instance, you’ll be given your server’s IP address and password. If you’re on Linux or a Mac, open up Terminal and login. (If you&rsquo;re on Windows, you&rsquo;ll need to download Putty.) To login using Terminal, use the following command, replacing the Xs with your own IP address:</p>

<p><code>bash
ssh root@xxx.xxx.xxx.xxx
</code></p>

<p>This command uses SSH to connect to your server as the user <code>root</code>. If you’re unfamiliar with SSH, it stands for Secure Shell, and it’s basically a network protocol that allows two computers to securely communicate with one another. There are many other protocols out there, such as HTTP, which allows browsers to communicate with web servers.</p>

<p>The first time you attempt to login, you’ll be asked if you’re sure you want to continue connecting; type &ldquo;yes&rdquo;. Then enter the password for the <code>root</code> user, and you’ll be logged in.</p>

<h1>Groups and Privileges</h1>

<p>Now that you’re in, the first thing we’ll do is change the password for <code>root</code> using the following command:</p>

<p><code>bash
passwd
</code></p>

<p>This will prompt you to enter a new password twice. Next, we’ll create a new group called <code>deployers</code>, which will allow us to easily manage the users with deployment privileges:</p>

<p><code>bash
groupadd deployers
</code></p>

<p>Now we’ll create a new user called <code>bob</code>, and assign him to the <code>deployers</code> group we just created above:</p>

<p><code>bash
adduser bob —ingroup deployers
</code></p>

<p>This command will prompt you to enter a password for this user, in addition to some other information afterwards, but after you enter the password twice, feel free to just press “Enter” for the other fields, as they’re not strictly necessary. By the way, don’t use the same password for both <code>root</code> and the user you just created above or <a href="http://www.cartoonstock.com/lowres/computers-computer-self_destruct-explode-username-password-ksm0529l.jpg">bad things will happen</a>.</p>

<p>Next thing we’ll do is open the <code>sudoers</code> file containing a list of users and groups who have root privileges:</p>

<p><code>bash
nano /etc/sudoers
</code></p>

<p>and we’ll add the following line into it:</p>

<p><code>text sudoers
%deployers      ALL=(ALL) ALL
</code></p>

<p>You can then exit the nano text editor by typing &ldquo;Control-X&rdquo; and typing &ldquo;Y&rdquo; when asked if you want to save. In case you’re wondering, the line we just added above will give the users in the <code>deployers</code> group the ability to run commands as <code>root</code>. If this is new to you, I can explain.</p>

<p>Running commands while logged in as <code>root</code> is considered bad practice because, as the superuser, <code>root</code> can run any and all commands, and since there is no undo functionality in Unix, one accidental bad command and your system can be seriously disrupted. That’s why we created a separate user called <code>bob</code>, which will have deployment privileges and nothing else.</p>

<p>But why did we create a <code>deployers</code> group and added <code>bob</code> into it? Well, first of all, we could’ve avoided creating a group altogether and just added <code>bob</code> to the <code>sudoers</code> file and given <em>him</em> <code>root</code> privileges instead. But let’s say I’m working on a project with a friend and she wants to be able to deploy as well. I would have to then add her to the <code>sudoers</code> file too (to give her <code>root</code> privileges), and the file would keep growing every time a new user with deployment privileges needed to be added. This would be a nightmare to maintain.</p>

<p>A better way to go about this is to create a group called <code>deployers</code>, give the group <code>root</code> privileges, and then add users to this group. This way, whenever I’d need to add new users with deployment privileges, I would just need to add them to the <code>deployers</code> group. This keeps the <code>sudoers</code> file clean and organized, while allowing me to easily manage the members of the group as well. I could, for example, easily revoke some rights for all members of the <code>deployers</code> group at the same time, instead of doing it one user at a time, or I could simply remove a user from the <code>deployers</code> group if I discover, for example, that he still creates &ldquo;1234&rdquo; passwords for his accounts.</p>

<p>Okay, but why is it necessary for users and groups to have <code>root</code> privileges? Well, these privileges allow a user, say <code>bob</code>, to run commands he otherwise would not be able to run due to not having the necessary permissions, which arises from the fact that the user is not <code>root</code> and therefore has limited privileges. But given <code>root</code> privileges, or being part of a group with <code>root</code> privileges, enables <code>bob</code> to run these commands simply by preceding the command with <code>sudo</code>. He’ll then be prompted to enter his password, and the command will run.</p>

<p>That’s the reasoning behind giving the <code>deployers</code> group <code>root</code> privileges and adding <code>bob</code> into it. Later on, <code>bob</code> will need these privileges during the deployment process.</p>

<h1>Configuring SSH Access</h1>

<p>Now we’re ready for the next step in securing our server, and we’ll start by opening the <code>ssh_config</code> file:</p>

<p><code>bash
nano /etc/ssh/sshd_config
</code></p>

<p>This file contains a number of rules that define who can login to the server and in what way. The first thing we’ll do is change the port number with which users will login; the default port that servers listen on is 22, but it’s wise to change it to another value so that any potential hackers have some extra work to do in figuring out the correct one; you can choose any port number from 1025 to 65536. Once you have your number, look for a line that looks like the following:</p>

<p><code>text sshd_config
Port 22
</code></p>

<p>and change its port number to the one you picked. Make sure you make a note of the new port number because you’ll need it for future login.</p>

<p>Next, look for another line in the file that looks like this:</p>

<p><code>text sshd_config
PermitRootLogin yes
</code></p>

<p>and change the “yes” to a “no”; this prevents <code>root</code> user login, which means that any potential hackers will need to know the name of one of the users on the server to actually login.</p>

<p>We can even go a step further and define exactly which existing users are able to login. Since I only want <code>bob</code> to have login access, I’ll add the following line to the end of the file:</p>

<p><code>text sshd_config
AllowUsers bob
</code></p>

<p>You could even specify a space-separated list of users here, if you have more than one user in need of login access.</p>

<p>Alright, there is one final line that we’ll add to the end of our file:</p>

<p><code>text sshd_config
UseDNS no
</code></p>

<p>This line disables hostname lookup, which can lead to a delay of up to 30 seconds when logging in with <code>ssh</code>. Disabling it will save you time and do no harm.</p>

<p>To put these changes into effect, we’ll reload SSH, like so:</p>

<p><code>bash
/etc/init.d/sshd reload
</code></p>

<p>Now we’re ready to test the configurations we just made to make sure they work. I’ll open a new shell in Terminal, without closing my current one, and try to login as the user <code>bob</code> on the port I specified in <code>sshd_config</code>:</p>

<p><code>bash
ssh -p 23523 bob@xxx.xxx.xxx.xxx
</code></p>

<p>Make sure you change the above command to match the user and port number you specified in your own <code>sshd_config</code> file, or it obviously won’t work. The above command will then prompt you to enter that user’s password. If you login successfully, congratulations! Your configuration is correct! You can close your previous shell and just continue using the current one; otherwise, you’ll need to go back and double check your <code>sshd_config</code> file configurations.</p>

<h1>Enabling SSH Authentication</h1>

<p>The final thing we’ll do to secure our server is enable SSH authentication, which will allow us to use SSH keys to authenticate with the server, instead of the traditional password authentication. This is a more secure approach because password authentication involves sending your password over the network, and this makes it vulnerable to being intercepted and cracked. It’s also more convenient since you won’t need to enter it every time you want to login. But before we move on, I’d like to briefly explain how SSH keys work and what makes them more secure.</p>

<p>All SSH keys come in pairs: one private and the other public. The private key is stored locally and needs to be carefully guarded, while the public key is stored on the remote server to which you will be logging in. Anytime you want to connect to the server, it will use the public key to create a challenge, which it will then send over to you, and only you, the holder of the private key, will be able to correctly understand and solve the challenge. Your response is then sent back to the server, and if it’s correct, it’ll grant you access.</p>

<p>If you don’t already have an SSH key, you can generate it with the following command:</p>

<p><code>bash
ssh-keygen
</code></p>

<p>It’ll prompt you to enter a path and passphrase, but the default path is fine, and since we won’t be setting up a passphrase, you can just press “enter” for both. This will store both the private and public keys in the <code>~/.ssh/</code> directory, and they will be named according to the type of encryption used, the default being RSA authentication. Your private key will be stored in a file called <code>id_rsa</code>, while <code>id_rsa.pub</code> will hold your public key.</p>

<p>Having our keys generated, we’re now ready to copy our public key over to the remote server using the <code>ssh-copy-id</code> command. (If you’re on a Mac, and you don’t have <code>ssh-copy-id</code> installed, you can install it using Homebrew with <code>brew install ssh-copy-id</code>.) Below is the full <code>ssh-copy-id</code> command that will copy our key over to the server:</p>

<p><code>bash
ssh-copy-id -i ~/.ssh/id_rsa.pub -p 23523 bob@xxx.xxx.xxx.xxx
</code></p>

<p>This will create a new file called <code>authorized_keys</code> on your remote server inside the <code>~/.ssh</code> directory and store your public key in it. If you now try to <code>ssh</code> into your server, you should be authenticated and logged in without entering your password.</p>

<p>Going through this process might seem a bit tedious and time consuming at first, but after you’ve done it a couple times, it will get easier and hopefully become second nature. Security is important, and the time you spend learning and implementing it is time well spent.</p>

<h1>Summary</h1>

<p>To summarize, we made our server more secure by:</p>

<ol>
<li>limiting <code>root</code> privileges to just members of the <code>deployers</code> group</li>
<li>setting a custom port with which to connect</li>
<li>disabling <code>root</code> login</li>
<li>specifying exactly which user is able to login</li>
<li>enabling SSH authentication</li>
</ol>


<p>Of course, this doesn’t mean our server is “unhackable” by any means, but it is significantly more secure than it was before. You can now sleep more peacefully knowing that any future hackers have at least some of their work cut out for them.</p>

<p>In “Deploying Rails Apps, Part 2,” we’ll start setting up the server by installing the technology stack behind Phindee. If you’d like to be notified when its out, feel free to <a href="http://www.feedblitz.com/f/?Sub=927939&amp;cids=1">subscribe</a>, and you&rsquo;ll get the complete post delivered right to your inbox as soon as it&rsquo;s released.</p>

<p>Stay hungry. Stay foolish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Ruby on Rails Apps]]></title>
    <link href="http://vladigleba.github.io/blog/2014/01/17/testing-ruby-on-rails-apps/"/>
    <updated>2014-01-17T12:35:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2014/01/17/testing-ruby-on-rails-apps</id>
    <content type="html"><![CDATA[<p>I started learning Ruby on Rails over a year ago, and as most beginners, I chose the popular <cite><a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">Ruby on Rails Tutorial</a></cite> as my initial guide. Because there was so much new material to absorb, I decided to skip the sections about testing (and I’m glad I did or my head would’ve exploded). When I finished the book, I decided to build a Rails app called <a href="http://phindee.com/">Phindee</a> in order to solidify what I had just learned. I never went back to learn about testing, however. Now over a year later, I did just that and was finally able to write a solid test suite for the app.</p>

<!-- more -->


<p>To be honest, I was a bit reluctant to pickup testing at first. I knew it was important to test code (and I did that by sprinkling <code>print</code> statements all over my code), but it was never a part of my workflow. When I got into the zone, the last thing I wanted to do is slow down and write tests. Over the past couple of days, however, I finally saw the light. And it was glorious.</p>

<p>Let me share it with you.</p>

<h1>Test-Driven Development</h1>

<p>Test-driven development (TDD) is an approach to software development in which we first write a test for a desired functionality, then run the test to make sure it fails, and only then do we implement the said functionality. Once implemented, we run the test once more to make sure our implementation behaves the way our test says it should.</p>

<p>We write and run a failing test first for two reasons:</p>

<ol>
<li>it helps guide our implementation due to the fact that we’ve already identified what the result should look like, and</li>
<li>it makes sure that the test is actually covering the functionality we think it is, because it’s easy to write a test that doesn’t really check what we think its checking</li>
</ol>


<p>The benefits of TDD are many, but the way I see it, it boils down to three main ones: peace of mind, saved time, and better code.</p>

<h2>Peace of Mind</h2>

<p>How many times have you found yourself wanting to refactor an ugly mess of code, but due to the fear of breaking things, you ended up ditching the effort all together? This happens to me all the time, and I hate it. It doesn’t need be this way though. Since adding test cases to Phindee, I’ve refactored more than half of my helper functions without any worry of breaking things.</p>

<p>But it gets better. Testing not only allows you to refactor with confidence, you also get to deploy with confidence, and this comes as part of the package, without any additional effort.</p>

<p>This kind of peace of mind is possible because a test suite catches bugs in your code like no other. You don’t even need to write a large number of tests to reap the rewards; a few well-written test cases can go a long way.</p>

<h2>Saved Time</h2>

<p>Let me ask you this: Would you rather run a command that looks for bugs in your code on demand, and tells you exactly where to look if it finds them, or would you rather have your users discover the bugs in production, thereby sending you on a frantic bug-hunting spree? It’s a no brainer, yet all too often we find ourselves discovering bugs in production when they could’ve easily been discovered in development.</p>

<p>The beauty with having a test suite is you write your tests once, and running them on demand is as simple as typing a short command. The amount of time this saves is enormous. Of course, I’m not saying that writing test cases means you’re production environment will be bug free because software is never bug free; but it <em>will</em> help you track down <em>most</em> bugs <em>before</em> they reach production and do so in a fraction of the time it would’ve taken otherwise.</p>

<h2>Better Code</h2>

<p>Now that Phindee is backed up by a solid test suite, my code has drastically improved in quality because I was finally able to refactor it. It’s simpler, and there is now less of it.</p>

<p>Furthermore, having to write test cases for individual methods has also forced me to write simpler, decoupled methods. You see, it’s hard to write test cases for methods that do more than one thing and happen to be entangled with one another. And this is the reason why test cases lead to cleaner, simpler code. As a result, tracking down bugs is even easier, which means more saved time.</p>

<h1>How It’s Done</h1>

<p>Now that we’ve covered the benefits, I’d like to show you how easy it is to do the testing. Note that I will be using the testing library called Test Unit that ships by default with Rails, instead of the RSpec framework used by the <cite>Ruby on Rails Tutorial</cite>. (I’ll discuss why a bit later.)</p>

<p>Rails provides directories for five different categories of tests by default: helper tests, unit tests (directory is called <code>models</code>), functional tests (directory is called <code>controllers</code>), mailer tests, and integration tests. But before I go into them, I first need to introduce fixtures.</p>

<h2>Fixtures</h2>

<p>Fixtures are defined in YAML files, and their role is to initialize our models with sample data for the sole purpose of testing. They allow us to then easily use this data in our test cases without corrupting our development database. As an example, below is a fixture file for a model in Phindee called <code>Place</code>:</p>

<p>``` yaml places.yml
thai:
  name: Thai Chili Jam
  website: thaichilijam.com</p>

<p>grill:
  name: Portland Sports Bar and Grill
  website: portlandsportsbarandgrill.com
```</p>

<p>Here I created two instances of the <code>Place</code> model (<code>thai</code> and <code>grill</code>) and initialized their <code>name</code> and <code>website</code> attributes. The data is now ready to be used in our test cases. Because YAML is beyond the scope of this post, I won’t go into any more detail, but I encourage you to <a href="http://yaml.org/YAML_for_ruby.html">learn more</a>.</p>

<p>Now that we know about fixtures, we’re ready to learn about the different types of tests we can write for a Rails app. To better explain each type, I will show examples from Phindee.</p>

<h2>Helper Tests</h2>

<p>Helper tests are just what they sound like&mdash;they’re tests for your helper methods. When you create a controller using the <code>rails generate controller NAME</code> command, Rails automatically creates a <code>NAME_helper_test.rb</code> file inside <code>test/helpers</code> to write the tests in. Below is what one of my helper tests for Phindee looks like:</p>

<p>``` ruby happy_hours_helper_test.rb
  &hellip;</p>

<p>  test &lsquo;should return days given integers&rsquo; do</p>

<pre><code>assert_equal humanize_days('2'), 'monday'
assert_equal humanize_days('1-5'), 'sunday-thursday'
assert_equal humanize_days('3,4,7'), 'monday, wednesday, saturday'
</code></pre>

<p>  end</p>

<p>  &hellip;
```</p>

<p>The <code>assert_equal</code> method makes sure that <code>humanize_days(‘2’)</code> returns a string with a value of <code>’monday’</code>; if it doesn’t, it will raise an error. Because the <code>humanize_days</code> method understands three different string formats, I test each one once. If one of the three calls fails, it will tell me exactly which one failed, thereby making debugging easier. All it takes is three lines of code, and my method is fully tested.</p>

<p>In practice, we would typically first write these tests, run them to make sure they’re failing, and only then would we start their implementation.</p>

<h2>Unit Tests</h2>

<p>Unit tests are there to test your models. The <code>rails generate model NAME</code> command creates a file for these tests called <code>NAME_test.rb</code> inside the <code>test/models</code> directory. Below are two tests from Phindee for an attribute called <code>location_id</code>:</p>

<p>``` ruby happy_hour_test.rb
  &hellip;</p>

<p>  def setup</p>

<pre><code>@place = places(:thai) 
</code></pre>

<p>  end</p>

<p>  test &lsquo;should be invalid if name is missing&rsquo; do</p>

<pre><code>@place.name = nil
assert !@place.valid?
</code></pre>

<p>  end</p>

<p>  test &lsquo;should be invalid if name exceeds max length&rsquo; do</p>

<pre><code>@place.name = 'a' * 51
assert !@place.valid?
</code></pre>

<p>  end</p>

<p>  test &lsquo;should be invalid if name is not unique&rsquo; do</p>

<pre><code>identical = @place.dup
assert !identical.valid?
</code></pre>

<p>  end</p>

<p>  &hellip;
```</p>

<p>The <code>setup</code> method is not an actual test case; it’s just a method that gets called before each test case is executed. It simply initializes an instance variable called <code>@place</code> with the fixture we defined earlier called <code>thai</code>. This makes the <code>@place</code> instance variable available inside each subsequent test case.</p>

<p>The first test case sets the <code>name</code> attribute to <code>nil</code> and calls the <code>assert</code> method to check that the <code>valid?</code> method returned <code>false</code>. In other words, it&rsquo;s checking for the line below:</p>

<p><code>ruby place.rb
validates :name, presence: true
</code></p>

<p>The second test makes sure that a <code>name</code> attribute that exceeds the maximum length of 50 characters is not valid. This means it will look for a <code>length</code> helper with a <code>maximum</code> value set to 50, like so:</p>

<p><code>ruby place.rb
validates :name, presence: true, length: { maximum: 50 }
</code></p>

<p>And finally, the third test makes sure that duplicates are not valid, which means it&rsquo;ll look for a <code>uniqueness</code> helper set to <code>true</code>:</p>

<p><code>ruby place.rb
validates :name, presence: true, length: { maximum: 50 }, uniqueness: true
</code></p>

<p>You may be wondering what’s the point of all this? Well, if you ever accidentally delete a uniqueness declaration, for example, the test suite will let you know, and you will be able to fix it before you push your code to production and wreak havoc in your database.</p>

<h2>Functional Tests</h2>

<p>Functional tests are there to test your controllers, although you can also use them to test your views and verify that important HTML elements are present. Running <code>rails generate controller NAME</code> creates a file for these tests called <code>NAME_controller_test.rb</code> inside <code>test/controllers</code>. Let’s look at an example:</p>

<p>``` ruby happy_hour_controller_test.rb
  &hellip;</p>

<p>  test &ldquo;should get happening_now&rdquo; do</p>

<pre><code>get :happening_now          # simulates a get request on happening_now action
assert_response :success    # makes sure response returns with status code 200

# variables
assert_not_nil assigns(:happening_now)
assert_not_nil assigns(:geojson)

# header
assert_select '.intro h1', 'phindee' 
assert_select '.intro p', /.+/  # regex makes sure element is not empty

# definition list
assert_select 'article dl img', count: 2  # must be two img elements

# list items
assert_select 'article li p', /#{humanize_hours(assigns(:happening_now).first.start_time)}/
assert_select 'article li h2', assigns(:happening_now).first.location.place.name
</code></pre>

<p>  end</p>

<p>  &hellip;
```</p>

<p>The <code>assert_not_nil</code> method makes sure the variable that the <code>assigns</code> method retrieves is actually initialized. Note that <code>:happening_now</code> and <code>:geojson</code> are instance variables inside the controller, but here they&rsquo;re symbols.</p>

<p>All the other remaining assertions use the <code>assert_select</code> method to select an HTML element using the familiar CSS syntax and make sure it’s value is what we expect it to be. As you can see, the method is quite powerful; it can check for a specific string, evaluate a regular expression, and check for a certain number of elements using the <code>count</code> method, among <a href="http://api.rubyonrails.org/classes/ActionDispatch/Assertions/SelectorAssertions.html">other things</a>.</p>

<p>I’m only scratching the surface here of what’s possible with functional tests, and I encourage you to check out the official <a href="http://guides.rubyonrails.org/testing.html">Rails guide on testing</a> to learn more.</p>

<h2>Mailer Tests</h2>

<p>As you might guess, mailer tests are there to test mailer classes. A <code>NAME_mailer_test.rb</code> file is created inside <code>test/mailers</code> anytime you run <code>rails generate mailer NAME</code>. You can test your mailers in two different ways:</p>

<ol>
<li>test the mailer in isolation to make sure its output is what you expect (using unit tests)</li>
<li>test the controllers and models that use the mailers to make sure the right email is sent at the right time (using functional tests)</li>
</ol>


<p>When testing your mailers with unit tests, you’ll use fixtures to provide sample data demonstrating how the output should look. I don’t have any examples of mailer tests to show because I have not yet needed to implement email functionality for Phindee, but the <a href="http://guides.rubyonrails.org/testing.html">Rails guide</a> should give you a good feel for what they look like.</p>

<h2>Integration Tests</h2>

<p>Last but not least, we have integration tests, which are used to test controllers interacting with one another; they’re the “big picture” tests that make sure important workflows within your application are as bug free as possible. I haven’t written any integration tests for Phindee either because the app is simple enough that I only need one controller currently, but that will change in the near future, and I will update this section accordingly; in the meantime, feel free to see the <a href="http://guides.rubyonrails.org/testing.html">Rails guide</a> for examples.</p>

<p>One final thing I’d like to mention is the <code>test/test_helper.rb</code> file, which holds the default configuration for our tests. This file is included in all the tests, which means any methods added here are automatically available in all our tests. Pretty neat.</p>

<h1>Why Not RSpec?</h1>

<p>I chose not to use RSpec because I wanted learn about the way testing is done in Rails by default and see how it compares with RSpec. So far, it seems like both approaches are equally capable of doing everything necessary to sufficiently test your code; they just take a different approach with regards to the way you <em>write</em> the tests. RSpec&rsquo;s syntax seems more verbose and reads like English, while Test Unit’s syntax is more terse.</p>

<p>Currently, I’m leaning towards Test Unit because its terse syntax means less typing, and since it comes baked in with Rails, there is no need to inflate the code base with additional gems. (Rails 4 actually incorporated a library called MiniTest into Test Unit, which now offers support for RSpec-like syntax.)</p>

<p>But all this is irrelevant because what truly matters is that you practice test-driven development. Hopefully, I’ve shown you how easy it is to do it and convinced you that the benefits of doing so more than make up for the effort of writing them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using @font-face with Ruby on Rails]]></title>
    <link href="http://vladigleba.github.io/blog/2013/11/29/using-at-font-face-with-ruby-on-rails/"/>
    <updated>2013-11-29T11:35:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/29/using-at-font-face-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>When I was working on <a href="http://phindee.com/">Phindee</a>, I struggled with adding custom fonts; the asset pipeline had just been released, and it changed how one worked with assets. Perhaps there are others out there struggling with the same thing, which is why I’d like to share what I did and hopefully save some time for a few.</p>

<!-- more -->


<p>I&rsquo;ll be using <a href="http://www.fontsquirrel.com/">Font Squirrel</a> to generate the necessary font files, but there are other alternatives out there like <a href="https://www.google.com/fonts/">Google Fonts</a> and <a href="http://typekit.com/">Typekit</a>, which are easier to set up because they host the fonts for you on their own servers. The down side is if their servers go down so do your fonts. With Font Squirrel this is not the case because the fonts live directly on your own servers. This makes the setup a bit more involved, but hey, it&rsquo;s a learning opportunity, and the pay off is well worth it.</p>

<p>Alright, let&rsquo;s get to work.</p>

<h1>Setup</h1>

<p>First thing we’ll do is add a new directory called “fonts” to the <code>app/assets</code> directory; this is where we’ll place all our font files. I usually use Font Squirrel to generate these files, as they have hundreds of open source fonts to choose from; if you find a font you like, you can get access to the font files by downloading the font’s Webfont Kit, which includes all four major font formats (TTF, EOT, WOFF, and SVG). This means your fonts will be cross-browser compatible, as each major browser now supports at least one of the four formats.</p>

<p>Once we have our font files downloaded, we’ll add them to <code>app/assets/fonts</code>.</p>

<h1>Declaring Your Fonts</h1>

<p>Alright, we’re now ready to declare our fonts. In order to keep our code organized, we’ll add a new <code>fonts.css.scss</code> file to <code>app/assets/stylesheets</code>, and we’ll make our <code>@font-face</code> declarations right inside it. (Note that I use the SASS pre-compiler; hence, the additional <code>.scss</code> extension.)</p>

<p>Since I downloaded my fonts from Font Squirrel, I already have my font declarations pre-written for me. All I need to do is open the Webfont Kit I downloaded earlier, find the <code>stylesheet.css</code> file, and copy and paste the code into the <code>font.css.scss</code> file I just created above. If you didn’t use Font Squirrel, you’ll need to write the declarations yourself. You can follow the examples at <a href="https://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax">fontspring.com</a> for guidance.</p>

<p>I downloaded Font Squirrel’s &ldquo;Action Man&rdquo; font as an example, and below is the <code>@font-face</code> declaration that came with it.</p>

<p>``` scss fonts.css.scss
@font-face {</p>

<pre><code>font-family: 'action_manregular';
src: asset-url('Action_Man-webfont.eot');
src: asset-url('Action_Man-webfont.eot?#iefix') format('embedded-opentype'),
       asset-url('Action_Man-webfont.woff') format('woff'),
       asset-url('Action_Man-webfont.ttf') format('truetype'),
       asset-url('Action_Man-webfont.svg#action_manregular') format('svg');
font-weight: normal;
font-style: normal;
</code></pre>

<p>}
```</p>

<p>Note that the above declaration uses the <code>url()</code> methods by default to specify the font’s location. In order to make this work with the Rails Asset Pipeline, you’ll want to change those methods to <code>asset-url()</code>, or the fonts might not load.</p>

<p>Now all that&rsquo;s left is to declare our font inside whatever CSS file is appropriate using the <code>font-family</code> property, like so:</p>

<p><code>scss base.css.scss
p { font-family: 'action_manregular'; }
</code></p>

<p>Note that my font name matches the font name inside the <code>@font-face</code> <code>font-family</code> declaration. If names don’t match exactly, it might not work.</p>

<h1>And That&rsquo;s a Wrap</h1>

<p>Believe it or not, that’s all there is to it! If you refresh your browser, you should be able to see the new fonts in action. If that’s not the case, double check to make sure you’re using the <code>font-url()</code> methods if you’re running a pre-compiler like SASS or LESS, and make sure your <code>font-family</code> declarations match your <code>@font-face</code> declarations to the tee, including little things like capitalization, hyphens, underscores, etc. If that doesn&rsquo;t do it then Google might be your best bet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MapBox with Ruby on Rails]]></title>
    <link href="http://vladigleba.github.io/blog/2013/11/14/using-mapbox-with-ruby-on-rails/"/>
    <updated>2013-11-14T10:39:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/14/using-mapbox-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Last week <a href="/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland/">I wrote about</a> <a href="http://phindee.com/">Phindee</a>, a Ruby on Rails app I made to make it easy to discover happy hours in downtown Portland. I quickly mentioned that Phindee’s mapping functionality is provided by the <a href="https://www.mapbox.com/mapbox.js/">MapBox JavaScript API</a>, but did not go into any more detail for brevity reasons. I still think it’s an important topic to talk about because I remember having a hard time finding tutorials about integrating MapBox with Ruby on Rails, specifically.</p>

<!-- more -->


<p>I hope this post fills a bit of that void.</p>

<h1>Why MapBox?</h1>

<p>It’s actually quite simple, really. You see, Google is an immense company swimming in cash and dominating virtually every product it has its hands in. Who has the world’s most popular video sharing site? Google. Search engine? Google. How about email service? Google. And mapping service? Google. Whose mobile operating system has the largest market share worldwide? Google’s. Heck, it’s not even a close race in most of these categories.</p>

<p>While this is great for the company, it&rsquo;s not so healthy for the rest of us. Whenever a company lacks competition, the pace of innovation slows, and arrogance towards customers tends to rise. Anytime a majority of our data is concentrated in the hands of a single company, feelings of unease should arise. That’s why whenever a small, promising startup takes on the giant, I will cheer for <a href="http://venturebeat.com/2013/10/16/mapbox-heads-into-battle-against-google-maps-with-a-10m-war-chest-from-foundry-group/">the underdog</a>. And <a href="http://www.pcmag.com/article2/0,2817,2401037,00.asp">I’m not the only one</a>.</p>

<p>Besides, MapBox is actually open source, and given a choice, I’ll go with open source over proprietary any day.</p>

<h1>Converting Addresses into Coordinates</h1>

<p>Alright, enough of that. Let&rsquo;s start coding.</p>

<p>First thing we&rsquo;ll do is convert our addresses into coordinates, which MapBox needs in order to place our markers (pin-drops) on the map. We could use the <a href="https://developers.google.com/maps/documentation/geocoding/">Google Geocoding API</a> to do this manually, but I recommend using the <a href="http://www.rubygeocoder.com/">Geocoder</a> gem to automate the process. The gem uses the Google Maps API by default, but it supports other services as well.</p>

<p>Because there is a <a href="http://railscasts.com/episodes/273-geocoder">Railscasts episode</a> covering the gem, I won’t go into any more detail here.</p>

<h1>Building a JSON object</h1>

<p>Once we have the coordinates, we’re ready to build a JSON object array that will tell MapBox how to display our markers. Our JSON objects will be in the <a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON format</a>, which is just a format to describe geographic data in JSON. MapBox uses the GeoJSON format to capture the necessary data needed to generate all the markers on the map. Building a JSON object in Rails is easy. The code below shows how I did it for Phindee; it comes from my <code>HappyHourController</code>.</p>

<p>``` ruby happy_hours_controller.rb
@happy_hours = HappyHour.all
@geojson = Array.new</p>

<p>@happy_hours.each do |happy_hour|
  @geojson &lt;&lt; {</p>

<pre><code>type: 'Feature',
geometry: { 
  type: 'Point', 
  coordinates: [happy_hour.longitude, happy_hour.latitude] 
},
properties: { 
  name: happy_hour.name,
  address: happy_hour.street,
  :'marker-color' =&gt; '#00607d', 
  :'marker-symbol' =&gt; 'circle', 
  :'marker-size' =&gt; 'medium' 
}
</code></pre>

<p>  }
end
```</p>

<p>The above code simply loops through each happy hour, creates an object, then appends and returns the newly created object to the <code>@geojson</code> array with the help of the <code>&lt;&lt;</code> method. Note that each object in our JSON array must contain a <code>type</code> key, a <code>geometry</code> key, and a <code>property</code> key. In our example above, the <code>geometry</code> key says that we want our marker displayed as a point at that specific set of coordinates, while the <code>property</code> key says we want our marker to be a medium blue circle that displays the happy hour name and street address when clicked.</p>

<p>I placed the above code inside one of the methods in my happy_hours_controller.rb file, as that’s the controller that deals with happy hours. You’ll place your code inside whatever controller is appropriate for your specific situation.</p>

<h2>Telling Rails How to Respond</h2>

<p>Because we want Rails to be able to return a JSON object, we’ll need to explicitly tell it do so via a <code>respond_to</code> block, which we will place right after the code we wrote above.</p>

<p><code>ruby happy_hours_controller.rb
respond_to do |format|
  format.html
  format.json { render json: @geojson }  # respond with the created JSON object
end
</code></p>

<p>Depending on the type of request, only one of the two lines above will be executed. For example, when we will later make an AJAX request in the JSON format, Rails will know to respond with the JSON object we just created above; otherwise, it will respond with a regular HTML file.</p>

<h1>Working with the MapBox API</h1>

<p>Now that we have the building blocks in place, we’re ready to start working with the MapBox API itself. My code examples below will all be in CoffeeScript because that’s what I used for Phindee, but if you’re not familiar with CoffeeScript, you can copy the code examples into <a href="http://js2coffee.org/">js2coffee.org</a> to get the JavaScript equivalent.</p>

<h2>Adding the Library Code</h2>

<p>Alright, first thing we’ll do is include the MapBox JavaScript API, along with the accompanying CSS code; this will go inside our main application layout file.</p>

<p>``` html application.html.erb</p>

<script src="http://api.tiles.mapbox.com/mapbox.js/v1.0.2/mapbox.js"></script>


<p><link href="http://api.tiles.mapbox.com/mapbox.js/v1.0.2/mapbox.css" rel="stylesheet" />
```</p>

<p>When I wrote this code, the latest version of the MapBox JavaScript API was 1.0.2, and my links above reflect that. See their <a href="https://www.mapbox.com/mapbox.js/overview/">documentation</a> for the current latest version and update your links accordingly.</p>

<h2>Initializing the Map</h2>

<p>Next, we’ll create a free MapBox account and make our own custom-colored map. Once we have the map ready, we’ll open the JavaScript file that corresponds to the controller which contains the two earlier code blocks (mine is called <code>happy_hours.js.coffee</code>), and we’ll add a line instantiating the map with the map ID of the custom-colored map we just created.</p>

<p>``` coffeescript happy_hours.js.coffee</p>

<h1>initialize the map on the &lsquo;map&rsquo; div</h1>

<h1>with the given map ID, center, and zoom</h1>

<p>map = L.mapbox.map(&lsquo;map&rsquo;, &lsquo;your-map-id&rsquo;).setView([45.52086, -122.679523], 14)
```</p>

<p>The coordinates we’re passing on to the <code>setView()</code> method tell the API where to center the map, while the 14 represents the zoom level for the map. In reality, <code>setView()</code> actually comes from the <a href="http://leafletjs.com/reference.html#map-setview">Leaflet JavaScript library</a>; MapBox simply extends and simplifies it.</p>

<h2>Making the AJAX Call</h2>

<p>Okay, now we’re ready to use the JSON objects we created earlier. We’ll make an AJAX call in the JSON format, and Rails will return our JSON object.</p>

<p>``` coffeescript happy_hours.js.coffee</p>

<h1>get JSON object</h1>

<h1>on success, parse it and</h1>

<h1>hand it over to MapBox for mapping</h1>

<p>markerLayer = $.ajax
  dataType: &lsquo;text&rsquo;
  url: &lsquo;happy_hours/happening_now.json&rsquo;
  success: (data) &ndash;></p>

<pre><code>geojson = $.parseJSON(data)
map.markerLayer.setGeoJSON(geojson)
</code></pre>

<p>```</p>

<p>The code above simply sends out an AJAX call to the URL that corresponds to the controller method into which we added the JSON object code from before. The <code>.json</code> extension alerts Rails to return a JSON response, instead of an HTML one. On a successful return, we then parse the JSON object and pass it on to the <code>setGeoJSON()</code> method for mapping. Kid stuff.</p>

<h2>Creating Custom Popups</h2>

<p>Now we’ll create our custom popups.</p>

<p>``` coffeescript happy_hours.js.coffee</p>

<h1>add custom popups to each marker</h1>

<p>map.markerLayer.on &lsquo;layeradd&rsquo;, (e) &ndash;>
  marker = e.layer
  feature = marker.feature</p>

<p>  # create custom popup
  popupContent =  &lsquo;<div class="popup">&rsquo; +</p>

<pre><code>                '&lt;h3&gt;' + feature.properties.name + '&lt;/h3&gt;' +
                '&lt;p&gt;' + feature.properties.address + '&lt;/p&gt;' +
              '&lt;/div&gt;'
</code></pre>

<p>  # <a href="http://leafletjs.com/reference.html#popup">http://leafletjs.com/reference.html#popup</a>
  marker.bindPopup popupContent,</p>

<pre><code>closeButton: false
minWidth: 320
</code></pre>

<p>```</p>

<p>To summarize the code above, we’re simply looping through each marker, creating a custom popup for it, and then binding it using the <code>bindPop()</code> method, which once again comes from the Leaflet library.</p>

<h2>Opening a Popup Programmatically</h2>

<p>If you look at <a href="http://phindee.com/">Phindee</a>, you’ll notice that when you open the sidebar and click on a happy hour, the popup on the corresponding marker on the map automatically opens up. Being able to open up a popup programmatically is useful, and below is how I did it.</p>

<p>``` coffeescript happy_hours.js.coffee</p>

<h1>handles a sidebar happy hour click</h1>

<p>$(&lsquo;article li&rsquo;).click (e) &ndash;><br/>
  current = $(this)
  currentlyClickedName = current.find(&lsquo;h2&rsquo;).text()</p>

<p>  # opens/closes popup for currently clicked happy hour
  map.markerLayer.eachLayer (layer) &ndash;></p>

<pre><code>if layer.feature.properties.name is currentlyClickedName
  id = layer._leaflet_id
  map._layers[id].openPopup()
</code></pre>

<p>```</p>

<p>We’re simply adding a <code>click</code> event on the sidebar happy hours, extracting the happy hour name, and looping through each marker to find the one with the matching name. Once we find a match, we extract the marker’s ID, and use that ID to open up the popup programmatically by calling Leaflet’s <code>openPopup()</code> method.</p>

<p>And that’s all there is to it! Our MapBox integration with Ruby on Rails is now complete, although we only scratched the surface of what&rsquo;s possible. Feel free to take a look at the <a href="https://www.mapbox.com/mapbox.js">MapBox</a> and <a href="http://leafletjs.com/reference.html">Leaflet</a> documentation to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phindee: A New Way to Discover Happy Hours in Downtown Portland]]></title>
    <link href="http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland/"/>
    <updated>2013-11-08T12:59:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland</id>
    <content type="html"><![CDATA[<p>I love Portland. It’s a fun, quirky city that makes me feel right at home. And the longer I live here, the deeper my affection grows. There are many reasons why this is so, but one high on the list is the food scene. Now I haven’t lived in any other major city, so I can’t compare, but others who have tend to agree. <!-- more --></p>

<p>I’m certainly satisfied.</p>

<h1>An Idea Is Born</h1>

<p>Of course, eating out all the time can get a bit expensive, and being a college student, I’m definitely not swimming in cash. I usually eat out just for lunch because I hate bringing cold lunch, but even this can quickly add up. So in an effort to save money (and to learn Ruby on Rails), I built a happy hour web application a couple months ago called <a href="http://phindee.com/">Phindee</a>.</p>

<p>Being a web developer, I always enjoy learning about other people&rsquo;s stacks, so I&rsquo;d like to return the favor and share how Phindee works.</p>

<h1>A Look at the Wiring</h1>

<p>When you visit Phindee, you’re presented with a map of the current happy hours in downtown Portland, along with information like the happy hour type and time, as well as the name, phone number, website, and address of its location. And of course, it doesn’t matter what device you use to visit Phindee because it’s based on a responsive design.</p>

<p>Behind the scenes, Phindee sits on top of a <a href="http://linode.com/">Linode</a> server powered by <a href="http://www.ubuntu.com/">Ubuntu</a> and served by <a href="http://nginx.org/">Nginx</a> and <a href="http://unicorn.bogomips.org/">Unicorn</a>. I originally had it setup with <a href="https://www.phusionpassenger.com/">Passenger</a>, but since I like to do multiple deploys a day, I got tired of Passenger restarts and site downtime. Unicorn solves this nicely.</p>

<h2>Deployment</h2>

<p>With regards to choosing Nginx, it was a matter of simplicity and speed. Phindee marked my first try at setting up a server from scratch, and from what I read online, Nginx was best suited for my situation. When it came to the actual setup, Ryan Bates’ <a href="http://railscasts.com/">Railscasts episodes</a> helped me out tremendously, especially his episode about <a href="http://railscasts.com/episodes/335-deploying-to-a-vps">VPS deployment</a>.</p>

<p>Up to that point, my previously deployment experience consisted of firing up <a href="http://fireftp.net/">FireFTP</a> and dragging and dropping the necessary files into the appropriate directories on my server. Funny, I know. As a result, it took me a couple of long nights to get everything working properly. Looking back, it was definitely worth it though.</p>

<h2>Storage</h2>

<p>With regards to storage, I went with <a href="http://www.sqlite.org/">SQLite</a> because it was already setup as the Rails default database. I know, kinda lame, but figuring out how to setup a more sophisticated database did not seem like a good use of time, especially since I already had my hands full with server setup. But now that I&rsquo;m done, I do plan on migrating to a <a href="http://www.postgresql.org/">PostgreSQL</a> and <a href="http://redis.io/">Redis</a> backend in the near future.</p>

<h2>Mapping</h2>

<p>The mapping functionality is provided by the excellent <a href="https://www.mapbox.com/mapbox.js/">MapBox JavaScript API</a>. I stumbled upon MapBox thanks to an A List Apart <a href="http://alistapart.com/article/hack-your-maps">article</a> I had read. I originally planned on using Google Maps, but the level of customization MapBox allows is incredible and their documentation is outstanding. On top of that, I feel like Google already has enough money, so why not support an open source service built by a cool new company? More diversity can&rsquo;t hurt, right?</p>

<h2>Icons</h2>

<p>The icons came from <a href="http://thenounproject.com/">The Noun Project</a>, an excellent collection of vector symbols. All the icons are free, but you are required to attribute the designer if you use them. If that’s not possible, you’re free to purchase a full license from the designer and use the icon without attribution; the fee is usually $1.99.</p>

<h2>Preprocessors</h2>

<p>Finally, I rely on <a href="http://slim-lang.com/">SLIM</a> to generate the HTML, <a href="http://sass-lang.com/">SASS</a> to generate the CSS, and <a href="http://coffeescript.org/">CoffeeScript</a> to generate the JavaScript. These pre-processors are easy to pick up, and they’ll save you more than a few keystrokes.</p>

<h1>The Power of the Web</h1>

<p>The world population is now approaching 7.1 billion and <a href="http://data.worldbank.org/indicator/IT.NET.USER.P2">2.5 billion of those</a> are able to access a web application I can build with nothing more than a laptop. I don’t know about you, but that’s mind boggling to me. There are few other professions that have the same reach with such a limited resource pool.</p>

<p>And beyond that, the internet is one of the few things still in existence that gives power and influence to anybody and everybody who has access to it. It transcends borders and gives people a voice. It’s a tremendous blessing that must never be taken away nor destroyed.</p>

<p>It’s an exciting time to be a web developer.</p>
]]></content>
  </entry>
  
</feed>
